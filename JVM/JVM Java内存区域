# JVM——Java内存区域

[链接：Java内存区域](https://segmentfault.com/a/1190000018281373)

**Java虚拟机 运行时数据区域**

![Java](C:\Users\李佳庆\Desktop\APP\笔记本\图片库\Java.png)

###### 线程独占（ⅠⅡⅢ）

**Ⅰ 程序计数器**

​				各个线程都有一个独立的程序计数器，记录正在执行的虚拟机字节码指令的地址。

**Ⅱ Java虚拟机栈**

​				线程私有，与线程拥有相同的生命周期。

​				虚拟机栈描述的是Java方法执行的线程内存模型：每个方法被执行的时候，Java虚拟机都会同步创建						一个栈帧用于存储**局部变量表**、操作数栈、动态连接、方法出口等信息。每一个方法被调用直至执						行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。

​	**局部变量表**

​				①基本数据类型：（boolean、byte、char、short、int、float、long、double）

​				②对象引用

​				③returnAddress（指向一条字节码指令的地址）

​				long和double占两个局部变量槽（Slot），其余占一个。局部变量表所需内存空间在编译期间完成						分配，方法运行期间不会改变局部变量表的大小（槽的数量）。

**Ⅲ 本地方法栈**

​				与Java虚拟机栈相似，Java虚拟机栈为虚拟机执行Java方法（即字节码）服务，而本地方法栈是为虚						拟机用到的本地（native）方法服务。

###### 线程共享（ⅣⅤ）

**Ⅳ Java堆**

​				唯一目的：**存放对象实例**

​				Java堆是垃圾收集器管理的内存区域，也叫GC堆

​				可通过参数-Xmx 和 -Xms设定堆的大小

**Ⅴ 方法区**

​				用于存储已被虚拟机加载的 类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。

​	**运行时常量池**

​				方法区的一部分。存放编译器生成的各种字面与符号引用的常量池表，将在类加载后存放到方法区						的运行时常量池

**其他 直接内存**



# 1. 对象的创建

当Java虚拟机遇到一条字节码new指令时，首先将去检查这个指令的参数能否在方法区的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。

> 符号引用：包括类和接口的全限定名，字段名称，方法名和描述名



### ① 对象在堆中的内存分配

类加载之后虚拟机将为新生对象分配内存。对象所需内存的大小在类加载完成后便可确定，为对象分配空间的任务实际上便等同于把一块确定大小的内存块从Java堆中划分出来。两种分配方式如下：



#### 指针碰撞：

假设Java堆中内存是绝对规整的，所有被使用过的内存都被放在一边，空闲的内存被放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的距离，这种分配方式称为“指针碰撞”。

#### 空闲列表：

如果Java堆中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“空闲列表”。



> 选择哪种分配方式又Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有空间压缩整理的能力决定。



#### 并发分配的线程安全问题：

由于Java堆是线程共享的区域，在并发情况下可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况。有两种解决方案：



##### 同步锁定：

对分配内存空间的动作进行同步处理，虚拟机采用CAS配上失败重试的方式保证更新操作的原子性；

##### 缓冲区：

把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为**本地线程分配缓冲**，哪个线程要分配内存，就在哪个线程的本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定。



### ② 初始化内存空间为零值

内存分配完成之后，虚拟机必须将分配到的内存空间（包括本地线程分配缓存区）（不包括对象头，只是实例数据部分）都初始化为零值。这部操作保证了对象的实例字段在Java代码中可以不赋初值就直接使用，使程序能访问到这些字段的数据类型所对应的零值。



### ③ 对对象进行必要设置

最后，Java虚拟机还要对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码（真正调用时才会计算）、对象的GC分代年龄等信息。这些信息存放在对象的对象头之中。根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不用的设置方式。





# 2. 对象内存布局

虚拟机里，对象在堆内存中的布局如图所示。

![image-20200827134238083](C:\Users\李佳庆\Desktop\APP\笔记本\图片库\image-20200827134238083.png)

**Ⅰ、** **对象头**

其中对象头部分包括Mark Word和类型指针两类信息：

![image-20200827134427110](C:\Users\李佳庆\Desktop\APP\笔记本\图片库\image-20200827134427110.png)

**Mark Word**(存储对象自身的运行时数据，可动态定义)

​				哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等。

​				2个比特用于存储锁标志位，记录当前对象锁状态。

​		![image-20200827135100445](C:\Users\李佳庆\Desktop\APP\笔记本\图片库\image-20200827135100445.png)



**类型指针**

​				对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例。此外，如果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是如果数组的长度时不确定的，将无法通过元数据中的信息推断出数组的大小。

**Ⅱ、** **实例数据**

​					对象真正存储的有效信息，包括从父类继承下来和在子类中定义的各种类型的字段。

**Ⅲ、 对齐填充**

​					起占位符作用，虚拟机的自动内存管理系统要求对象起始地址（任何对象的大小）必须是8字节的整数倍。对象头已经被设计成8字节的倍数，因此，如果对象实例数据部分没有对齐则用对齐填充补全。







# 3. 对象的访问定位

创建对象自然是为了后续使用该对象，Java程序会通过栈上的reference（指向对象的引用）数据来操作堆上的具体对象。具体访问方式有两种：



#### 使用句柄：

如果使用句柄访问的话，Java堆中将可能会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息。

![image-20201007160726600](C:\Users\李佳庆\Desktop\APP\笔记本\图片库\image-20201007160726600.png)

#### 直接指针：

如果使用直接指针访问的话，Java堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址。如果只是访问对象本身的话，就不需要一次间接访问的开销。

![image-20201007160740796](C:\Users\李佳庆\Desktop\APP\笔记本\图片库\image-20201007160740796.png)

> 两种访问方式各有优势。
>
> 使用句柄访问最大的好处就是reference中存储的是稳定句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。
>
> 使用直接指针访问的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，因此这类开销是很大的执行成本





# 4. 实战：OutOfMemoryError异常



### ① Java堆溢出

> Java堆内存的OOM异常是实际应用中最常见的内存溢出异常情况。

#### 异常提示：

**java.lang.OutOfMemoryError: Java heap space**

#### 处理方法：

常规方法为首先通过内存影响分析工具对Dump出来的堆转储快照进行分析。第一步先确认内存中导致OOM的对象是否是必要的，即先分清楚是出现了内存泄漏（对象未清理导致的内存溢出）还是内存溢出（没有足够的内存）。

如果是内存泄漏，可进一步通过工具查看泄露对象到GC Roots的引用链，找到泄露对象是通过怎样的引用路径、与哪些GC Roots相关联，才导致垃圾收集器无法回收它们。根据泄露对象的类型信息以及它到GC Roots引用链的信息，一般可以比较准确的定位到这些对象创建的位置，进而找出产生内存泄露的代码的具体位置。

如果不是内存泄漏，换句话说就是内存中的对象确实都是必须存活的，那就应当检查Java虚拟机的堆参数（    -Xmx 与  -Xms）设置，与机器的内存对比，看看是否还有向上调整的空间。再从代码上检查是否存在某些对象生命周期过长、持有状态时间过长、存储结构设计不合理等情况，尽量减少程序运行期间的内存消耗。



### ② 虚拟机栈和本地方法栈溢出

#### 异常情况：

1）如果线程请求的栈深度大于虚拟机所允许的最大深度（不允许扩展），将抛出java.lang.StackOverflowError异常。

2）如果虚拟机的栈内存允许动态扩展，当扩展容量无法申请到足够的内存时，将抛出java.lang.OutOfMemoryError异常。

> -Xoss 设置本地方法栈大小； -Xss设置虚拟机栈大小

#### 处理方法：

出现StackOverflowError异常时，会有明确错误堆栈可供分析，比较容易定位到问题所在。

由于操作系统分配给每个进程的内存*（包括最大堆容量，最大方法区容量，程序计数器消耗的内存，直接内存和进程本身消耗的内存）*是有限制的，因此未每个线程分配到的栈内存越大，可以建立的线程数量自然就减少，建立线程时就越容易把剩下的内存耗尽，就更容易出现内存溢出异常。因此只能通过减少最大堆和减少栈容量来换取更多的线程。



### ③ 方法区和运行时常量池溢出

#### 异常提示：

**java.lang.OutOfMemoryError: PermGen space**

> 自JDK7起，原本存放在方法区永久代的字符串常量池被转移值Java堆之中。



### ④ 本机直接内存溢出

#### 异常信息：

如果内存溢出后产生的Dump文件很小，而程序中有直接或间接的使用了DirectMemory，可能就是直接内存方面的原因